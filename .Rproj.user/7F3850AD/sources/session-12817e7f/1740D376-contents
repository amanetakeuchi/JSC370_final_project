---
title: "Lab 08 - Text Mining/NLP"
output: html_document
---

```{r setup, echo=FALSE}
knitr::opts_chunk$set(eval = T, include  = T)
```

# Learning goals

- Use `unnest_tokens()` and `unnest_ngrams()` to extract tokens and ngrams from text
- Use dplyr and ggplot2 to analyze and visualize text data
- Try a theme model using `topicmodels`

# Lab description

For this lab we will be working with the medical record transcriptions from https://www.mtsamples.com/. And is loaded and "fairly" cleaned at https://github.com/JSC370/JSC370-2024/tree/main/data/medical_transcriptions.

This markdown document should be rendered using `github_document` document.



### Setup packages

You should load in `dplyr`, (or `data.table` if you want to work that way), `ggplot2` and `tidytext`. Install `wordcloud`, `tm`, and `topicmodels` if you don't already have them.



### Read in the Medical Transcriptions

Loading in reference transcription samples from https://www.mtsamples.com/

```{r, echo=FALSE}
# install.packages('tidytext')
#install.packages('wordcloud')
#install.packages('tm')
#install.packages('topicmodels')
library(tidytext)
library(tidyverse)
library(wordcloud)
library(tm)
library(topicmodels)
library(NLP)
library(RColorBrewer)

mt_samples <- read_csv("https://raw.githubusercontent.com/JSC370/JSC370-2024/main/data/medical_transcriptions/mtsamples.csv")
mt_samples <- mt_samples %>%
  select(description, medical_specialty, transcription)

head(mt_samples)
```

---

## Question 1: What specialties do we have?

We can use `count()` from `dplyr` to figure out how many different medical specialties are in the data. Are these categories related? overlapping? evenly distributed? Make a bar plot.

```{r}
mt_samples |>
  count(medical_specialty, sort = TRUE) |> # Sorted by the column names in alphabetic order
  ggplot(aes(medical_specialty, n)) + geom_col() + coord_flip() #flipping fixes the clustered labels
```

---

## Question 2: Tokenize

- Tokenize the the words in the `transcription` column
- Count the number of times each token appears
- Visualize the top 20 most frequent words with a bar plot
- Create a word cloud

Explain what we see from this result. Does it makes sense? What insights (if any) do we get?

```{r}
# tokenize the textual data we have
tokens <- mt_samples |>
  select(transcription) |>
  unnest_tokens(word, transcription) |>
  group_by(word) |>
  summarise(word_frequency=n()) |>
  arrange(across(word_frequency, desc)) |>
  head(20)

# Plot the frequency of the tokens
tokens |>
  ggplot(aes(reorder(word, -word_frequency), word_frequency)) +
  geom_bar(stat="identity") + geom_col() + coord_flip()

# Plot the wordcloud
wordcloud(tokens$word, tokens$word_frequency)
```

---

## Question 3: Stopwords

- Redo Question 2 but remove stopwords(use stopwords package)
- Bonus points if you remove numbers as well (use regex)

What do we see know that we have removed stop words? Does it give us a better idea of what the text is about?

- Try customizing your stopwords list to include 3-4 additional words that do not appear informative

```{r}
# Information about the stopwords we are using
head(stopwords("english"))
length(stopwords("english"))

# remove all stopwords from the text data we have and display top 20 freqently appear words
tokens <- mt_samples |>
  select(transcription) |>
  unnest_tokens(word, transcription) |>
  group_by(word) |>
  summarise(word_frequency=n()) |>
  arrange(across(word_frequency, desc)) |>
  filter(!(word %in% stopwords("english"))) |>
  filter(!(grepl("[[:digit:]]+", word))) |>
  head(20)

# Plot the frequency
tokens |>
  ggplot(aes(reorder(word, -word_frequency), word_frequency)) +
  geom_bar(stat="identity") + geom_col() + coord_flip()

# Plot wordcloud
wordcloud(tokens$word,  tokens$word_frequency)
```
```{r}
# Customize stopwords
stopwords2 <-c(stopwords("english"), "also", "using", "use", "used")
```

---



# Question 4: ngrams

Repeat question 2, but this time tokenize into bi-grams. How does the result change if you look at tri-grams? Note we need to remove stopwords a little differently. You don't need to recreate the wordclouds.

```{r}
# create stopwords regex for bigram 
sw_start <- paste0("^", paste(stopwords2, collapse=" |^"), "$")
sw_end <- paste0("", paste(stopwords2, collapse="$| "), "$") # any words paired with stop words after or before the stopwords

tokens_bigram <- mt_samples |>
  select(transcription) |>
  unnest_tokens(ngram, transcription, token = "ngrams", n = 2) |>
  filter(!grepl(sw_start, ngram, ignore.case=TRUE))|>
  filter(!grepl(sw_end, ngram, ignore.case=TRUE))|>
  filter(!(grepl("[[:digit:]]+", ngram))) |>
  group_by(ngram) |>
  summarize(word_frequency=n()) |>
  arrange(across(word_frequency, desc)) 

# TODO: Plot barplot for top bigrams, and wordcloud
top20 <- tokens_bigram |>
  head(20)

# bar plot
top20 |>
  ggplot(aes(reorder(ngram, -word_frequency), word_frequency)) +
  geom_bar(stat="identity") + geom_col() + coord_flip()

#wordcloud
wordcloud(top20$ngram,  top20$word_frequency)
```

```{r}
# TODO: Repeat for trigram
tokens_trigram <- mt_samples |>
  select(transcription) |>
  unnest_tokens(ngram, transcription, token = "ngrams", n = 3) |>
  filter(!grepl(sw_start, ngram, ignore.case=TRUE))|>
  filter(!grepl(sw_end, ngram, ignore.case=TRUE))|>
  filter(!(grepl("[[:digit:]]+", ngram))) |>
  group_by(ngram) |>
  summarize(word_frequency=n()) |>
  arrange(across(word_frequency, desc)) |>
  head(20)

# Plot barplot for trigram
tokens_trigram |> 
  ggplot(aes(reorder(ngram, -word_frequency), word_frequency)) + 
  geom_bar(stat="identity") + geom_col() + coord_flip()
```
---

# Question 5: Examining words

Using the results from the bigram, pick a word and count the words that appear before and after it, and create a plot of the top 20.

```{r}
library(stringr)
# e.g. patient, blood, preoperative...
# e.g. blood
# "[word] blood | blood [word]"
# "\\sblood$ | ^blood\\s"
token_blood <- tokens_bigram |>
  filter(str_detect(ngram, regex("\\sblood$|^blood\\s"))) |>
    mutate(word = str_remove(ngram, "blood"),
         word = str_remove_all(word, " ")) |>
  group_by(word) |>
  summarize(word_frequency=n()) |>
  arrange(across(word_frequency, desc)) |>
  head(20)

token_blood |>
  ggplot(aes(reorder(word, -word_frequency), word_frequency)) +
  geom_bar(stat="identity") + geom_col() + coord_flip() + labs(y="Word Frequency", x="Words appear with blood")
```

---


# Question 6: Words by Specialties

Which words are most used in each of the specialties. you can use `group_by()` and `top_n()` from `dplyr` to have the calculations be done within each specialty. Remember to remove stopwords. How about the most 5 used words?


```{r}
# Table of top 5 frequent tokens for each speciality
mt_samples |>
   unnest_tokens(word, transcription) |>
   filter(!(word %in% stopwords("english"))) |>
   filter(!(grepl("[[:digit:]]+", word))) |>
   group_by(medical_specialty) |>
   count(word, sort=TRUE) |>
   top_n(5, n) |>
   knitr::kable()
```


# Question 7: Topic Models

See if there are any themes in the data by using a topic model (LDA). 

- you first need to create a document term matrix
- then you can try the LDA function in `topicmodels`. Try different k values.
- create a facet plot of the results from the LDA (see code from lecture)


```{r}
# Make document term matrix
transcripts_dtm <- mt_samples |>
  select(transcription) |>
  unnest_tokens(word, transcription) |>
  filter(!(word %in% stopwords("english"))) |>
  filter(!(grepl("[[:digit:]]+", word))) |>
  DocumentTermMatrix()

# Convert into matrix 
transcripts_dtm <- as.matrix(transcripts_dtm)   

# Model LDA
transcripts_lda <- LDA(transcripts_dtm, k=5, control=list(seed=1234))
transcripts_lda
```

```{r}
# Get top 10 tokens associated with each group
transcripts_tops_terms <-
  tidy(transcripts_lda, matrix="beta") |>
  group_by(topic) |>
  slice_max(beta, n=10) |>
  ungroup() |>
  arrange(topic, -beta)

# Facet plot 
transcripts_tops_terms |>
  ggplot(aes(reorder(term, -beta), beta)) +
  geom_bar(stat="identity") + geom_col() + coord_flip() + labs(y="Beta Value", x="Words appear in topic") + 
  facet_wrap(~topic)
```


# Deliverables

1. Questions 1-7 answered, raw .Rmd file and pdf or html output uploaded to Quercus
